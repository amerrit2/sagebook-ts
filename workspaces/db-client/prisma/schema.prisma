// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  tsp
  tbsp
  cup
  pint
  quart
  gallon
  floz
  oz
  ml
  l
  unit
}

// Global - Belongs to many IngredientAmount instances.
model Ingredient {
  name String @id

  IngredientAmount IngredientAmount[]
}

model IngredientAmount {
  id             Int    @id @default(autoincrement())
  ingredientName String
  amount         Int    @db.SmallInt
  unit           Unit
  instructionId  Int

  // Contains
  ingredient Ingredient @relation(fields: [ingredientName], references: [name])

  // Owned by
  instruction Instruction @relation(fields: [instructionId], references: [id])
}

model Instruction {
  id          Int    @id @default(autoincrement())
  text        String @db.Text
  durationSec Int    @db.Integer
  kind        String @db.VarChar(40)
  recipeId    Int

  // Contains
  ingredientAmounts IngredientAmount[]

  // Owned by
  recipe Recipe @relation(fields: [recipeId], references: [id])
}

model Recipe {
  id         Int    @id @default(autoincrement())
  name       String
  ownerEmail String @db.VarChar(230)

  // Contains
  instructions Instruction[]

  // Belongs to
  meals     Meal[]
  userDatas UserData[]

  // Owned by
  owner User @relation(fields: [ownerEmail], references: [email])
}

model Meal {
  id         Int    @id @default(autoincrement())
  name       String
  ownerEmail String @db.VarChar(230)

  // Contains
  recipes Recipe[]

  // Belongs to
  rotations Rotation[]
  userDatas UserData[]

  // Owned by
  owner User @relation(fields: [ownerEmail], references: [email])
}

enum ActionKind {
  shop
  cook
  eatLeftovers
  eatOut
  orderIn
}

model Frequency {
  id         Int        @id @default(autoincrement())
  kind       ActionKind
  value      Int // Ratio value
  rotationId Int

  // Owned by
  rotation Rotation @relation(fields: [rotationId], references: [id])
}

model Rotation {
  id         Int    @id @default(autoincrement())
  name       String
  ownerEmail String @db.VarChar(230)

  // Contains
  meals       Meal[]
  frequencies Frequency[]

  // Belongs to
  userData UserData[]

  // Owned by
  owner User @relation(fields: [ownerEmail], references: [email])
}

model User {
  email        String    @id @db.VarChar(230)
  passwordHash Bytes
  passwordSalt Bytes
  data         UserData?

  // Belongs to
  ownedRecipes   Recipe[]
  ownedMeals     Meal[]
  ownedRotations Rotation[]
}

model UserData {
  userEmail String @id @unique @db.VarChar(230)

  // Contains
  rotations Rotation[]
  meals     Meal[]
  recipes   Recipe[]

  // Owned by
  user User @relation(fields: [userEmail], references: [email])
}
