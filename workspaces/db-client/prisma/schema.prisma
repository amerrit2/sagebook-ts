// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  tsp
  tbsp
  cup
  pint
  quart
  gallon
  floz
  oz
  ml
  l
  unit
}

enum DietaryRestrictions {
  gluten
  nuts
  dairy
  keto
  paleo
}

// ----------> SIMPLIFY RECIPES, MATCH BASIC DATA FROM ALL-RECIPES

// Global - Belongs to many IngredientAmount instances.
model Ingredient {
  name                String                @id
  dietaryRestrictions DietaryRestrictions[]

  // Belongs to
  IngredientAmount IngredientAmount[]
}

model IngredientAmount {
  id     Int  @id @default(autoincrement())
  amount Int  @db.SmallInt
  unit   Unit

  // Contains
  ingredientName String
  ingredient     Ingredient @relation(fields: [ingredientName], references: [name])

  // Owned by
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Recipe {
  id           Int      @id @default(autoincrement())
  name         String
  numServings  Int      @db.SmallInt
  instructions String[]
  prepTimeSec  Int
  cookTimeSec  Int

  // Contains
  ingredientAmounts IngredientAmount[]

  // Belongs to
  meals     Meal[]
  userDatas UserData[]

  // Owned by
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [email])
}

model Meal {
  id   Int    @id @default(autoincrement())
  name String

  // Contains
  recipes Recipe[]

  // Belongs to
  rotations Rotation[]
  userDatas UserData[]

  // Owned by
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [email])
}

enum ActionKind {
  cook
  eatLeftovers
  eatOut
  orderIn
}

model Frequency {
  id    Int        @id @default(autoincrement())
  kind  ActionKind
  value Int // Ratio value

  // Owned by
  rotationId Int
  rotation   Rotation @relation(fields: [rotationId], references: [id])
}

model Rotation {
  id              Int    @id @default(autoincrement())
  name            String
  servingsPerMeal Int

  // Contains
  meals       Meal[]
  frequencies Frequency[]

  // Belongs to
  userData UserData[]

  // Owned by
  ownerId String @db.VarChar(230)
  owner   User   @relation(fields: [ownerId], references: [email])
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique @db.VarChar(230)
  passwordHash Bytes
  passwordSalt Bytes
  data         UserData?

  // Contains
  ownedRecipes   Recipe[]
  ownedMeals     Meal[]
  ownedRotations Rotation[]
}

model UserData {
  // Contains
  rotations Rotation[]
  meals     Meal[]
  recipes   Recipe[]

  // Owned by
  userId String @id
  user   User   @relation(fields: [userId], references: [id])
}
